schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  graphs: Graphs!
}

type Mutation {
  addGraph(input: AddGraphInput!): AddGraphPayload!
}

type Subscription {
  graphAdded: Graph!
  graphChanged: Graph!
  graphRemoved: Graph!
}

input GraphInput {
  id: UUID!
  x: Float!
  y: Float!
  z: Float!
}

type Graph {
  id: UUID!
  x: Float!
  y: Float!
  z: Float!
}

type Graphs {
  graph: Graph!
  all("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: GraphFilterInput order: [GraphSortInput!]): AllConnection
}

input GraphFilterInput {
  and: [GraphFilterInput!]
  or: [GraphFilterInput!]
  id: UuidOperationFilterInput
  x: FloatOperationFilterInput
  y: FloatOperationFilterInput
  z: FloatOperationFilterInput
}

input GraphSortInput {
  id: SortEnumType
  x: SortEnumType
  y: SortEnumType
  z: SortEnumType
}

"A connection to a list of items."
type AllConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AllEdge!]
  "A flattened list of the nodes."
  nodes: [Graph!]
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type AllEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Graph!
}

scalar UUID

input AddGraphInput {
  graph: GraphInput!
}

type AddGraphPayload {
  graph: Graph
}