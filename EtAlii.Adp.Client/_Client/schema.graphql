schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  graphs: Graphs!
  items: ItemsQuery!
  relations: RelationsQuery!
}

type Mutation {
  addGraph(input: AddGraphInput!): AddGraphPayload!
  changeGraph(input: ChangeGraphInput!): ChangeGraphPayload!
  removeGraph(input: RemoveGraphInput!): RemoveGraphPayload!
  addItem(input: AddItemInput!): AddItemPayload!
  changeItem(input: ChangeItemInput!): ChangeItemPayload!
  removeItem(input: RemoveItemInput!): RemoveItemPayload!
  addRelation(input: AddRelationInput!): AddRelationPayload!
  changeRelation(input: ChangeRelationInput!): ChangeRelationPayload!
  removeRelation(input: RemoveRelationInput!): RemoveRelationPayload!
}

type Subscription {
  graphAdded: Graph!
  graphChanged: Graph!
  graphRemoved: Graph!
  itemAdded: Item!
  itemChanged: Item!
  itemRemoved: Item!
  relationAdded: Relation!
  relationChanged: Relation!
  relationRemoved: Relation!
}

type Graph {
  id: ID!
  name: String!
  x: Float!
  y: Float!
  z: Float!
  items: [Item!]!
  relations: [Relation!]!
}

type RelationsQuery {
  relation: Relation!
  all("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RelationFilterInput order: [RelationSortInput!]): AllConnection
}

type ItemsQuery {
  item: Item!
  all("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ItemFilterInput order: [ItemSortInput!]): AllConnection
}

type Graphs {
  graph: Graph!
  all(where: GraphFilterInput order: [GraphSortInput!]): [Graph!]!
}

scalar UUID

type Item {
  id: ID!
  name: String!
  x: Float!
  y: Float!
  w: Float!
  h: Float!
}

type Relation {
  id: ID!
  name: String!
  source: Item!
  target: Item!
}

input RelationFilterInput {
  and: [RelationFilterInput!]
  or: [RelationFilterInput!]
  id: IdOperationFilterInput
  name: StringOperationFilterInput
  source: ItemFilterInput
  target: ItemFilterInput
}

input RelationSortInput {
  id: SortEnumType
  name: SortEnumType
  source: ItemSortInput
  target: ItemSortInput
}

"A connection to a list of items."
type AllConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AllEdge!]
  "A flattened list of the nodes."
  nodes: [Relation!]
}

input ItemFilterInput {
  and: [ItemFilterInput!]
  or: [ItemFilterInput!]
  id: IdOperationFilterInput
  name: StringOperationFilterInput
  x: FloatOperationFilterInput
  y: FloatOperationFilterInput
  w: FloatOperationFilterInput
  h: FloatOperationFilterInput
}

input ItemSortInput {
  id: SortEnumType
  name: SortEnumType
  x: SortEnumType
  y: SortEnumType
  w: SortEnumType
  h: SortEnumType
}

input GraphFilterInput {
  and: [GraphFilterInput!]
  or: [GraphFilterInput!]
  id: IdOperationFilterInput
  name: StringOperationFilterInput
  x: FloatOperationFilterInput
  y: FloatOperationFilterInput
  z: FloatOperationFilterInput
  items: ListFilterInputTypeOfItemFilterInput
  relations: ListFilterInputTypeOfRelationFilterInput
}

input GraphSortInput {
  id: SortEnumType
  name: SortEnumType
  x: SortEnumType
  y: SortEnumType
  z: SortEnumType
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type AllEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Relation!
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ListFilterInputTypeOfItemFilterInput {
  all: ItemFilterInput
  none: ItemFilterInput
  some: ItemFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRelationFilterInput {
  all: RelationFilterInput
  none: RelationFilterInput
  some: RelationFilterInput
  any: Boolean
}

input AddGraphInput {
  name: String!
}

type AddGraphPayload {
  graph: Graph
}

input ChangeGraphInput {
  id: UUID!
  name: String!
}

type ChangeGraphPayload {
  graph: Graph
}

input RemoveGraphInput {
  id: UUID!
}

type RemoveGraphPayload {
  graph: Graph
}

input AddItemInput {
  graphId: ID!
  xPosition: Float!
  yPosition: Float!
  name: String!
}

type AddItemPayload {
  item: Item
}

input ChangeItemInput {
  id: UUID!
  name: String!
}

type ChangeItemPayload {
  item: Item
}

input RemoveItemInput {
  id: UUID!
}

type RemoveItemPayload {
  item: Item
}

input AddRelationInput {
  name: String!
}

type AddRelationPayload {
  relation: Relation
}

input ChangeRelationInput {
  id: UUID!
  name: String!
}

type ChangeRelationPayload {
  relation: Relation
}

input RemoveRelationInput {
  id: UUID!
}

type RemoveRelationPayload {
  relation: Relation
}